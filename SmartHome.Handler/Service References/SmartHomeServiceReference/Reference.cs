//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartHome.Handler.SmartHomeServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SmartHomeServiceReference.ISmartHomeService")]
    public interface ISmartHomeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartHomeService/Start", ReplyAction="http://tempuri.org/ISmartHomeService/StartResponse")]
        bool Start();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartHomeService/Start", ReplyAction="http://tempuri.org/ISmartHomeService/StartResponse")]
        System.Threading.Tasks.Task<bool> StartAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartHomeService/Stop", ReplyAction="http://tempuri.org/ISmartHomeService/StopResponse")]
        void Stop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartHomeService/Stop", ReplyAction="http://tempuri.org/ISmartHomeService/StopResponse")]
        System.Threading.Tasks.Task StopAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartHomeService/Restart", ReplyAction="http://tempuri.org/ISmartHomeService/RestartResponse")]
        void Restart();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartHomeService/Restart", ReplyAction="http://tempuri.org/ISmartHomeService/RestartResponse")]
        System.Threading.Tasks.Task RestartAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartHomeService/IsOn", ReplyAction="http://tempuri.org/ISmartHomeService/IsOnResponse")]
        bool IsOn();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartHomeService/IsOn", ReplyAction="http://tempuri.org/ISmartHomeService/IsOnResponse")]
        System.Threading.Tasks.Task<bool> IsOnAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISmartHomeServiceChannel : SmartHome.Handler.SmartHomeServiceReference.ISmartHomeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SmartHomeServiceClient : System.ServiceModel.ClientBase<SmartHome.Handler.SmartHomeServiceReference.ISmartHomeService>, SmartHome.Handler.SmartHomeServiceReference.ISmartHomeService {
        
        public SmartHomeServiceClient() {
        }
        
        public SmartHomeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SmartHomeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartHomeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartHomeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Start() {
            return base.Channel.Start();
        }
        
        public System.Threading.Tasks.Task<bool> StartAsync() {
            return base.Channel.StartAsync();
        }
        
        public void Stop() {
            base.Channel.Stop();
        }
        
        public System.Threading.Tasks.Task StopAsync() {
            return base.Channel.StopAsync();
        }
        
        public void Restart() {
            base.Channel.Restart();
        }
        
        public System.Threading.Tasks.Task RestartAsync() {
            return base.Channel.RestartAsync();
        }
        
        public bool IsOn() {
            return base.Channel.IsOn();
        }
        
        public System.Threading.Tasks.Task<bool> IsOnAsync() {
            return base.Channel.IsOnAsync();
        }
    }
}
